
bin\Debug\Bot_SPlevel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  00000382  2**0
                  ALLOC
  2 .fuse         00000003  00820000  00820000  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000020  00000000  00000000  00000385  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000b6  00000000  00000000  000003a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000207  00000000  00000000  0000045b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000011e  00000000  00000000  00000662  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b0  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000a30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000164  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_23>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_29>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a4 30       	cpi	r26, 0x04	; 4
  c4:	b1 07       	cpc	r27, r17
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <main>
  cc:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <__vector_23>:
unsigned char ADC_Mesure_Compleated = 0x00;
unsigned char ISR_Occured=0x00;
uint16_t ADC_Val=0x0000;

ISR(TIMER0_OVF_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	df 93       	push	r29
  e2:	cf 93       	push	r28
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
    ISR_Occured=0xFF;
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	80 93 01 01 	sts	0x0101, r24
}
  ee:	cf 91       	pop	r28
  f0:	df 91       	pop	r29
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_29>:

ISR(ADC_vect)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
 10a:	df 93       	push	r29
 10c:	cf 93       	push	r28
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
    ADC_Mesure_Compleated=0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	80 93 00 01 	sts	0x0100, r24
}
 118:	cf 91       	pop	r28
 11a:	df 91       	pop	r29
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <adc_measure_init>:

void adc_measure_init(unsigned char channel)
{
 128:	df 93       	push	r29
 12a:	cf 93       	push	r28
 12c:	0f 92       	push	r0
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	89 83       	std	Y+1, r24	; 0x01
	//unsigned int result=0;

	ADMUX = 0;
 134:	ec e7       	ldi	r30, 0x7C	; 124
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	10 82       	st	Z, r1
	ADMUX &= ~(1<<REFS1)&~(1<<REFS0);			//ext. AREF = 5V
 13a:	ac e7       	ldi	r26, 0x7C	; 124
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	ec e7       	ldi	r30, 0x7C	; 124
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	8f 73       	andi	r24, 0x3F	; 63
 146:	8c 93       	st	X, r24
	ADMUX &= ~(1<<ADLAR);						//reight adjusted 10bit
 148:	ac e7       	ldi	r26, 0x7C	; 124
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	ec e7       	ldi	r30, 0x7C	; 124
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	8f 7d       	andi	r24, 0xDF	; 223
 154:	8c 93       	st	X, r24

	ADCSRB &= ~(1<<MUX5);
 156:	ab e7       	ldi	r26, 0x7B	; 123
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	eb e7       	ldi	r30, 0x7B	; 123
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	8f 7d       	andi	r24, 0xDF	; 223
 162:	8c 93       	st	X, r24
	ADMUX &= ~(1<<MUX4)&~(1<<MUX3)&~(1<<MUX2)&~(1<<MUX1);
 164:	ac e7       	ldi	r26, 0x7C	; 124
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	ec e7       	ldi	r30, 0x7C	; 124
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	81 7e       	andi	r24, 0xE1	; 225
 170:	8c 93       	st	X, r24
	ADMUX |= channel;
 172:	ac e7       	ldi	r26, 0x7C	; 124
 174:	b0 e0       	ldi	r27, 0x00	; 0
 176:	ec e7       	ldi	r30, 0x7C	; 124
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	90 81       	ld	r25, Z
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	89 2b       	or	r24, r25
 180:	8c 93       	st	X, r24

	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADIE)|(1<<ADIF);	//ADC activate, Prescaler on 128 -> 125kHz Samplingfrequenzy
 182:	aa e7       	ldi	r26, 0x7A	; 122
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	ea e7       	ldi	r30, 0x7A	; 122
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	8f 69       	ori	r24, 0x9F	; 159
 18e:	8c 93       	st	X, r24

	ADCSRA |= (1<<ADSC);						//start
 190:	aa e7       	ldi	r26, 0x7A	; 122
 192:	b0 e0       	ldi	r27, 0x00	; 0
 194:	ea e7       	ldi	r30, 0x7A	; 122
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	80 64       	ori	r24, 0x40	; 64
 19c:	8c 93       	st	X, r24
	//ADCSRA=0xC8;
	//while(ADCSRA&(1<<ADSC));					//wate till compleate -- wuld be like delay and got remouved

}
 19e:	0f 90       	pop	r0
 1a0:	cf 91       	pop	r28
 1a2:	df 91       	pop	r29
 1a4:	08 95       	ret

000001a6 <adc_val_update>:

void adc_val_update(void)
{
 1a6:	df 93       	push	r29
 1a8:	cf 93       	push	r28
 1aa:	00 d0       	rcall	.+0      	; 0x1ac <adc_val_update+0x6>
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
        // Updating global var ADC_Val
    	uint8_t adcl_tmp=0x00, adch_tmp=0x00;
 1b0:	1a 82       	std	Y+2, r1	; 0x02
 1b2:	19 82       	std	Y+1, r1	; 0x01
        adcl_tmp=ADCL;
 1b4:	e8 e7       	ldi	r30, 0x78	; 120
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	8a 83       	std	Y+2, r24	; 0x02
        adch_tmp=ADCH;
 1bc:	e9 e7       	ldi	r30, 0x79	; 121
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	89 83       	std	Y+1, r24	; 0x01
        ADC_Val=(adch_tmp<<8)|adcl_tmp;
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	88 2f       	mov	r24, r24
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	38 2f       	mov	r19, r24
 1cc:	22 27       	eor	r18, r18
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	88 2f       	mov	r24, r24
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	82 2b       	or	r24, r18
 1d6:	93 2b       	or	r25, r19
 1d8:	90 93 03 01 	sts	0x0103, r25
 1dc:	80 93 02 01 	sts	0x0102, r24
}
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	cf 91       	pop	r28
 1e6:	df 91       	pop	r29
 1e8:	08 95       	ret

000001ea <main>:

int main(void)
{
 1ea:	df 93       	push	r29
 1ec:	cf 93       	push	r28
 1ee:	0f 92       	push	r0
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62

    // CLK_IO to 16MHz
    CLKPR=0x80;
 1f4:	e1 e6       	ldi	r30, 0x61	; 97
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 e8       	ldi	r24, 0x80	; 128
 1fa:	80 83       	st	Z, r24
    CLKPR=0x00;
 1fc:	e1 e6       	ldi	r30, 0x61	; 97
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	10 82       	st	Z, r1
    //Disable Jtag
    MCUCR |= (1<<JTD);
 202:	a5 e5       	ldi	r26, 0x55	; 85
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	e5 e5       	ldi	r30, 0x55	; 85
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	80 68       	ori	r24, 0x80	; 128
 20e:	8c 93       	st	X, r24
	MCUCR |= (1<<JTD);
 210:	a5 e5       	ldi	r26, 0x55	; 85
 212:	b0 e0       	ldi	r27, 0x00	; 0
 214:	e5 e5       	ldi	r30, 0x55	; 85
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	80 68       	ori	r24, 0x80	; 128
 21c:	8c 93       	st	X, r24

    //Timer 0 Setup
    TCCR0A=0x00;
 21e:	e4 e4       	ldi	r30, 0x44	; 68
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	10 82       	st	Z, r1
    TCCR0B=0x04;
 224:	e5 e4       	ldi	r30, 0x45	; 69
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	84 e0       	ldi	r24, 0x04	; 4
 22a:	80 83       	st	Z, r24
    TIMSK0=0x01;
 22c:	ee e6       	ldi	r30, 0x6E	; 110
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 83       	st	Z, r24
//0x3F
    DDRB=0xFF;
 234:	e4 e2       	ldi	r30, 0x24	; 36
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	80 83       	st	Z, r24
    PORTB=0x00;
 23c:	e5 e2       	ldi	r30, 0x25	; 37
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	10 82       	st	Z, r1
//0x40
    DDRD=0xFF;
 242:	ea e2       	ldi	r30, 0x2A	; 42
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	80 83       	st	Z, r24
    PORTD=0x00;
 24a:	eb e2       	ldi	r30, 0x2B	; 43
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	10 82       	st	Z, r1

    Will be active in future realeases
	*/

	//Interupts Aktivieren
    sei();
 250:	78 94       	sei

    uint8_t ISR_Count=0x00;
 252:	19 82       	std	Y+1, r1	; 0x01


    while(1)
    {
        //On the fly interupt handling
        if(ISR_Occured==0xFF)
 254:	80 91 01 01 	lds	r24, 0x0101
 258:	8f 3f       	cpi	r24, 0xFF	; 255
 25a:	29 f4       	brne	.+10     	; 0x266 <main+0x7c>
        {
            ISR_Occured=0x00;
 25c:	10 92 01 01 	sts	0x0101, r1
            ISR_Count=ISR_Count+1;
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	8f 5f       	subi	r24, 0xFF	; 255
 264:	89 83       	std	Y+1, r24	; 0x01
        }

        //Software Timer
        if(ISR_Count>=240)
 266:	89 81       	ldd	r24, Y+1	; 0x01
 268:	80 3f       	cpi	r24, 0xF0	; 240
 26a:	20 f0       	brcs	.+8      	; 0x274 <main+0x8a>
        {
            adc_measure_init(0); // Initialize measurement on ADC0 pin
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 94 00 	call	0x128	; 0x128 <adc_measure_init>
            ISR_Count=0x00;
 272:	19 82       	std	Y+1, r1	; 0x01
        }


        //ADC Measure Compleated interupt handling
        if(ADC_Mesure_Compleated==0xFF)
 274:	80 91 00 01 	lds	r24, 0x0100
 278:	8f 3f       	cpi	r24, 0xFF	; 255
 27a:	21 f4       	brne	.+8      	; 0x284 <main+0x9a>
        {
            ADC_Mesure_Compleated=0x00;
 27c:	10 92 00 01 	sts	0x0100, r1

            adc_val_update();
 280:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <adc_val_update>
        }


        //Handling of different voltage levels detected on ADC0 pin
        PORTB = 0x00;
 284:	e5 e2       	ldi	r30, 0x25	; 37
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	10 82       	st	Z, r1
        if(ADC_Val>=586)
 28a:	80 91 02 01 	lds	r24, 0x0102
 28e:	90 91 03 01 	lds	r25, 0x0103
 292:	22 e0       	ldi	r18, 0x02	; 2
 294:	8a 34       	cpi	r24, 0x4A	; 74
 296:	92 07       	cpc	r25, r18
 298:	28 f0       	brcs	.+10     	; 0x2a4 <main+0xba>
        {
           PORTB = 0x04;
 29a:	e5 e2       	ldi	r30, 0x25	; 37
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	84 e0       	ldi	r24, 0x04	; 4
 2a0:	80 83       	st	Z, r24
 2a2:	d8 cf       	rjmp	.-80     	; 0x254 <main+0x6a>
        }
        else if(ADC_Val>=575&&ADC_Val<=585)
 2a4:	80 91 02 01 	lds	r24, 0x0102
 2a8:	90 91 03 01 	lds	r25, 0x0103
 2ac:	22 e0       	ldi	r18, 0x02	; 2
 2ae:	8f 33       	cpi	r24, 0x3F	; 63
 2b0:	92 07       	cpc	r25, r18
 2b2:	68 f0       	brcs	.+26     	; 0x2ce <main+0xe4>
 2b4:	80 91 02 01 	lds	r24, 0x0102
 2b8:	90 91 03 01 	lds	r25, 0x0103
 2bc:	22 e0       	ldi	r18, 0x02	; 2
 2be:	8a 34       	cpi	r24, 0x4A	; 74
 2c0:	92 07       	cpc	r25, r18
 2c2:	28 f4       	brcc	.+10     	; 0x2ce <main+0xe4>
        {
            PORTB = 0x02;
 2c4:	e5 e2       	ldi	r30, 0x25	; 37
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	80 83       	st	Z, r24
 2cc:	c3 cf       	rjmp	.-122    	; 0x254 <main+0x6a>
        }
        else if(ADC_Val<=574)
 2ce:	80 91 02 01 	lds	r24, 0x0102
 2d2:	90 91 03 01 	lds	r25, 0x0103
 2d6:	22 e0       	ldi	r18, 0x02	; 2
 2d8:	8f 33       	cpi	r24, 0x3F	; 63
 2da:	92 07       	cpc	r25, r18
 2dc:	08 f0       	brcs	.+2      	; 0x2e0 <main+0xf6>
 2de:	ba cf       	rjmp	.-140    	; 0x254 <main+0x6a>
        {
            PORTB = 0x01;
 2e0:	e5 e2       	ldi	r30, 0x25	; 37
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 83       	st	Z, r24
 2e8:	b5 cf       	rjmp	.-150    	; 0x254 <main+0x6a>

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
