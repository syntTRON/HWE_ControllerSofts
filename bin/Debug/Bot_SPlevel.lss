
bin\Debug\Bot_SPlevel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000394  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  00000428  2**0
                  ALLOC
  2 .fuse         00000003  00820000  00820000  00000428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000020  00000000  00000000  0000042b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000b6  00000000  00000000  0000044b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000023b  00000000  00000000  00000501  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000141  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000338  00000000  00000000  0000087d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000164  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_23>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_29>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a4 30       	cpi	r26, 0x04	; 4
  c4:	b1 07       	cpc	r27, r17
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <main>
  cc:	0c 94 c8 01 	jmp	0x390	; 0x390 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <__vector_23>:
unsigned char ADC_Mesure_Compleated = 0x00;
unsigned char ISR_Occured=0x00;
uint16_t ADC_Val=0x0000;

ISR(TIMER0_OVF_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	df 93       	push	r29
  e2:	cf 93       	push	r28
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
    ISR_Occured=0xFF;
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	80 93 01 01 	sts	0x0101, r24
}
  ee:	cf 91       	pop	r28
  f0:	df 91       	pop	r29
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_29>:

ISR(ADC_vect)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
 10a:	df 93       	push	r29
 10c:	cf 93       	push	r28
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
    ADC_Mesure_Compleated=0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	80 93 00 01 	sts	0x0100, r24
}
 118:	cf 91       	pop	r28
 11a:	df 91       	pop	r29
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <adc_measure_init>:

void adc_measure_init(unsigned char channel)
{
 128:	df 93       	push	r29
 12a:	cf 93       	push	r28
 12c:	0f 92       	push	r0
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	89 83       	std	Y+1, r24	; 0x01
	//unsigned int result=0;

	ADMUX = 0;
 134:	ec e7       	ldi	r30, 0x7C	; 124
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	10 82       	st	Z, r1
	ADMUX &= ~(1<<REFS1)&~(1<<REFS0);			//ext. AREF = 5V
 13a:	ac e7       	ldi	r26, 0x7C	; 124
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	ec e7       	ldi	r30, 0x7C	; 124
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	8f 73       	andi	r24, 0x3F	; 63
 146:	8c 93       	st	X, r24
	ADMUX &= ~(1<<ADLAR);						//reight adjusted 10bit
 148:	ac e7       	ldi	r26, 0x7C	; 124
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	ec e7       	ldi	r30, 0x7C	; 124
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	8f 7d       	andi	r24, 0xDF	; 223
 154:	8c 93       	st	X, r24

	ADCSRB &= ~(1<<MUX5);
 156:	ab e7       	ldi	r26, 0x7B	; 123
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	eb e7       	ldi	r30, 0x7B	; 123
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	8f 7d       	andi	r24, 0xDF	; 223
 162:	8c 93       	st	X, r24
	ADMUX &= ~(1<<MUX4)&~(1<<MUX3)&~(1<<MUX2)&~(1<<MUX1);
 164:	ac e7       	ldi	r26, 0x7C	; 124
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	ec e7       	ldi	r30, 0x7C	; 124
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	81 7e       	andi	r24, 0xE1	; 225
 170:	8c 93       	st	X, r24
	ADMUX |= channel;
 172:	ac e7       	ldi	r26, 0x7C	; 124
 174:	b0 e0       	ldi	r27, 0x00	; 0
 176:	ec e7       	ldi	r30, 0x7C	; 124
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	90 81       	ld	r25, Z
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	89 2b       	or	r24, r25
 180:	8c 93       	st	X, r24

	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADIE)|(1<<ADIF);	//ADC activate, Prescaler on 128 -> 125kHz Samplingfrequenzy
 182:	aa e7       	ldi	r26, 0x7A	; 122
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	ea e7       	ldi	r30, 0x7A	; 122
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	8f 69       	ori	r24, 0x9F	; 159
 18e:	8c 93       	st	X, r24

	ADCSRA |= (1<<ADSC);						//start
 190:	aa e7       	ldi	r26, 0x7A	; 122
 192:	b0 e0       	ldi	r27, 0x00	; 0
 194:	ea e7       	ldi	r30, 0x7A	; 122
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	80 64       	ori	r24, 0x40	; 64
 19c:	8c 93       	st	X, r24
	//ADCSRA=0xC8;
	//while(ADCSRA&(1<<ADSC));					//wate till compleate -- wuld be like delay and got remouved

}
 19e:	0f 90       	pop	r0
 1a0:	cf 91       	pop	r28
 1a2:	df 91       	pop	r29
 1a4:	08 95       	ret

000001a6 <adc_val_update>:

void adc_val_update(void)
{
 1a6:	df 93       	push	r29
 1a8:	cf 93       	push	r28
 1aa:	00 d0       	rcall	.+0      	; 0x1ac <adc_val_update+0x6>
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
        // Updating global var ADC_Val
    	uint8_t adcl_tmp=0x00, adch_tmp=0x00;
 1b0:	1a 82       	std	Y+2, r1	; 0x02
 1b2:	19 82       	std	Y+1, r1	; 0x01
        adcl_tmp=ADCL;
 1b4:	e8 e7       	ldi	r30, 0x78	; 120
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	8a 83       	std	Y+2, r24	; 0x02
        adch_tmp=ADCH;
 1bc:	e9 e7       	ldi	r30, 0x79	; 121
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	89 83       	std	Y+1, r24	; 0x01
        ADC_Val=(adch_tmp<<8)|adcl_tmp;
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	88 2f       	mov	r24, r24
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	38 2f       	mov	r19, r24
 1cc:	22 27       	eor	r18, r18
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	88 2f       	mov	r24, r24
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	82 2b       	or	r24, r18
 1d6:	93 2b       	or	r25, r19
 1d8:	90 93 03 01 	sts	0x0103, r25
 1dc:	80 93 02 01 	sts	0x0102, r24
}
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	cf 91       	pop	r28
 1e6:	df 91       	pop	r29
 1e8:	08 95       	ret

000001ea <main>:

int main(void)
{
 1ea:	df 93       	push	r29
 1ec:	cf 93       	push	r28
 1ee:	00 d0       	rcall	.+0      	; 0x1f0 <main+0x6>
 1f0:	0f 92       	push	r0
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62

    // CLK_IO to 16MHz
    CLKPR=0x80;
 1f6:	e1 e6       	ldi	r30, 0x61	; 97
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 e8       	ldi	r24, 0x80	; 128
 1fc:	80 83       	st	Z, r24
    CLKPR=0x00;
 1fe:	e1 e6       	ldi	r30, 0x61	; 97
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	10 82       	st	Z, r1
    //Disable Jtag
    MCUCR |= (1<<JTD);
 204:	a5 e5       	ldi	r26, 0x55	; 85
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e5 e5       	ldi	r30, 0x55	; 85
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	8c 93       	st	X, r24
	MCUCR |= (1<<JTD);
 212:	a5 e5       	ldi	r26, 0x55	; 85
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	e5 e5       	ldi	r30, 0x55	; 85
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	80 68       	ori	r24, 0x80	; 128
 21e:	8c 93       	st	X, r24

    //Timer 0 Setup
    TCCR0A=0x00;
 220:	e4 e4       	ldi	r30, 0x44	; 68
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	10 82       	st	Z, r1
    TCCR0B=0x04;
 226:	e5 e4       	ldi	r30, 0x45	; 69
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	84 e0       	ldi	r24, 0x04	; 4
 22c:	80 83       	st	Z, r24
    TIMSK0=0x01;
 22e:	ee e6       	ldi	r30, 0x6E	; 110
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 83       	st	Z, r24
//0x3F
    DDRB=0xFF;
 236:	e4 e2       	ldi	r30, 0x24	; 36
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	80 83       	st	Z, r24
    PORTB=0x00;
 23e:	e5 e2       	ldi	r30, 0x25	; 37
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	10 82       	st	Z, r1
//0x40
    DDRD=0xFF;
 244:	ea e2       	ldi	r30, 0x2A	; 42
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	80 83       	st	Z, r24
    PORTD=0x00;
 24c:	eb e2       	ldi	r30, 0x2B	; 43
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	10 82       	st	Z, r1
    //Port c
    DDRC = 0x80;
 252:	e7 e2       	ldi	r30, 0x27	; 39
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 e8       	ldi	r24, 0x80	; 128
 258:	80 83       	st	Z, r24
    PORTC = 0x80;
 25a:	e8 e2       	ldi	r30, 0x28	; 40
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 e8       	ldi	r24, 0x80	; 128
 260:	80 83       	st	Z, r24

    Will be active in future realeases
	*/

	//Timer 4 Setup
	TCCR4D = 0x01;
 262:	e3 ec       	ldi	r30, 0xC3	; 195
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 83       	st	Z, r24
	OCR4C = 23;
 26a:	e1 ed       	ldi	r30, 0xD1	; 209
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	87 e1       	ldi	r24, 0x17	; 23
 270:	80 83       	st	Z, r24
	TCCR4A = 0xC2;
 272:	e0 ec       	ldi	r30, 0xC0	; 192
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	82 ec       	ldi	r24, 0xC2	; 194
 278:	80 83       	st	Z, r24
	TCCR4B = 0x05;
 27a:	e1 ec       	ldi	r30, 0xC1	; 193
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	85 e0       	ldi	r24, 0x05	; 5
 280:	80 83       	st	Z, r24
	OCR4A = 12;
 282:	ef ec       	ldi	r30, 0xCF	; 207
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	8c e0       	ldi	r24, 0x0C	; 12
 288:	80 83       	st	Z, r24

	//Interupts Aktivieren
    sei();
 28a:	78 94       	sei

    uint8_t ISR_Count=0x00;
 28c:	1b 82       	std	Y+3, r1	; 0x03

    while(1)
    {
        //On the fly interupt handling
        if(ISR_Occured==0xFF)
 28e:	80 91 01 01 	lds	r24, 0x0101
 292:	8f 3f       	cpi	r24, 0xFF	; 255
 294:	29 f4       	brne	.+10     	; 0x2a0 <main+0xb6>
        {
            ISR_Occured=0x00;
 296:	10 92 01 01 	sts	0x0101, r1
            ISR_Count=ISR_Count+1;
 29a:	8b 81       	ldd	r24, Y+3	; 0x03
 29c:	8f 5f       	subi	r24, 0xFF	; 255
 29e:	8b 83       	std	Y+3, r24	; 0x03
        }

        //Software Timer
        if(ISR_Count>=240)
 2a0:	8b 81       	ldd	r24, Y+3	; 0x03
 2a2:	80 3f       	cpi	r24, 0xF0	; 240
 2a4:	20 f0       	brcs	.+8      	; 0x2ae <main+0xc4>
        {
            adc_measure_init(0); // Initialize measurement on ADC0 pin
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 94 00 	call	0x128	; 0x128 <adc_measure_init>
            ISR_Count=0x00;
 2ac:	1b 82       	std	Y+3, r1	; 0x03
        }


        //ADC Measure Compleated interupt handling
        if(ADC_Mesure_Compleated==0xFF)
 2ae:	80 91 00 01 	lds	r24, 0x0100
 2b2:	8f 3f       	cpi	r24, 0xFF	; 255
 2b4:	21 f4       	brne	.+8      	; 0x2be <main+0xd4>
        {
            ADC_Mesure_Compleated=0x00;
 2b6:	10 92 00 01 	sts	0x0100, r1

            adc_val_update();
 2ba:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <adc_val_update>
        }


        //Handling of different voltage levels detected on ADC0 pin with automatic PWM controll
        PORTB = 0x00;
 2be:	e5 e2       	ldi	r30, 0x25	; 37
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	10 82       	st	Z, r1
        if(ADC_Val>=586)
 2c4:	80 91 02 01 	lds	r24, 0x0102
 2c8:	90 91 03 01 	lds	r25, 0x0103
 2cc:	22 e0       	ldi	r18, 0x02	; 2
 2ce:	8a 34       	cpi	r24, 0x4A	; 74
 2d0:	92 07       	cpc	r25, r18
 2d2:	f8 f0       	brcs	.+62     	; 0x312 <main+0x128>
        {
           PORTB = 0x04;
 2d4:	e5 e2       	ldi	r30, 0x25	; 37
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	84 e0       	ldi	r24, 0x04	; 4
 2da:	80 83       	st	Z, r24
           unsigned char tmp = ADC_Val - 585;
 2dc:	80 91 02 01 	lds	r24, 0x0102
 2e0:	90 91 03 01 	lds	r25, 0x0103
 2e4:	89 54       	subi	r24, 0x49	; 73
 2e6:	8a 83       	std	Y+2, r24	; 0x02
           if (tmp >= 5)
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	85 30       	cpi	r24, 0x05	; 5
 2ec:	30 f0       	brcs	.+12     	; 0x2fa <main+0x110>
           {
               OCR4A = 17 + tmp;
 2ee:	ef ec       	ldi	r30, 0xCF	; 207
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	8a 81       	ldd	r24, Y+2	; 0x02
 2f4:	8f 5e       	subi	r24, 0xEF	; 239
 2f6:	80 83       	st	Z, r24
 2f8:	04 c0       	rjmp	.+8      	; 0x302 <main+0x118>
           }
           else{OCR4A = 22;}
 2fa:	ef ec       	ldi	r30, 0xCF	; 207
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	86 e1       	ldi	r24, 0x16	; 22
 300:	80 83       	st	Z, r24
           if (tmp >= 12){OCR4A = 23;}
 302:	8a 81       	ldd	r24, Y+2	; 0x02
 304:	8c 30       	cpi	r24, 0x0C	; 12
 306:	18 f2       	brcs	.-122    	; 0x28e <main+0xa4>
 308:	ef ec       	ldi	r30, 0xCF	; 207
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	87 e1       	ldi	r24, 0x17	; 23
 30e:	80 83       	st	Z, r24
 310:	be cf       	rjmp	.-132    	; 0x28e <main+0xa4>
        }
        else if(ADC_Val>=575&&ADC_Val<=585)
 312:	80 91 02 01 	lds	r24, 0x0102
 316:	90 91 03 01 	lds	r25, 0x0103
 31a:	22 e0       	ldi	r18, 0x02	; 2
 31c:	8f 33       	cpi	r24, 0x3F	; 63
 31e:	92 07       	cpc	r25, r18
 320:	88 f0       	brcs	.+34     	; 0x344 <main+0x15a>
 322:	80 91 02 01 	lds	r24, 0x0102
 326:	90 91 03 01 	lds	r25, 0x0103
 32a:	22 e0       	ldi	r18, 0x02	; 2
 32c:	8a 34       	cpi	r24, 0x4A	; 74
 32e:	92 07       	cpc	r25, r18
 330:	48 f4       	brcc	.+18     	; 0x344 <main+0x15a>
        {
            PORTB = 0x02;
 332:	e5 e2       	ldi	r30, 0x25	; 37
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	80 83       	st	Z, r24
            OCR4A = 17;
 33a:	ef ec       	ldi	r30, 0xCF	; 207
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	81 e1       	ldi	r24, 0x11	; 17
 340:	80 83       	st	Z, r24
 342:	a5 cf       	rjmp	.-182    	; 0x28e <main+0xa4>
        }
        else if(ADC_Val<=574)
 344:	80 91 02 01 	lds	r24, 0x0102
 348:	90 91 03 01 	lds	r25, 0x0103
 34c:	22 e0       	ldi	r18, 0x02	; 2
 34e:	8f 33       	cpi	r24, 0x3F	; 63
 350:	92 07       	cpc	r25, r18
 352:	08 f0       	brcs	.+2      	; 0x356 <main+0x16c>
 354:	9c cf       	rjmp	.-200    	; 0x28e <main+0xa4>
        {
            PORTB = 0x01;
 356:	e5 e2       	ldi	r30, 0x25	; 37
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	80 83       	st	Z, r24
           unsigned char tmp = 575 - ADC_Val;
 35e:	80 91 02 01 	lds	r24, 0x0102
 362:	90 91 03 01 	lds	r25, 0x0103
 366:	98 2f       	mov	r25, r24
 368:	8f e3       	ldi	r24, 0x3F	; 63
 36a:	89 1b       	sub	r24, r25
 36c:	89 83       	std	Y+1, r24	; 0x01
           if (tmp >= 5)
 36e:	89 81       	ldd	r24, Y+1	; 0x01
 370:	85 30       	cpi	r24, 0x05	; 5
 372:	48 f0       	brcs	.+18     	; 0x386 <main+0x19c>
           {
               OCR4A = 17 - tmp;
 374:	ef ec       	ldi	r30, 0xCF	; 207
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	91 e1       	ldi	r25, 0x11	; 17
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	29 2f       	mov	r18, r25
 37e:	28 1b       	sub	r18, r24
 380:	82 2f       	mov	r24, r18
 382:	80 83       	st	Z, r24
 384:	84 cf       	rjmp	.-248    	; 0x28e <main+0xa4>
           }
           else{OCR4A = 12;}
 386:	ef ec       	ldi	r30, 0xCF	; 207
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	8c e0       	ldi	r24, 0x0C	; 12
 38c:	80 83       	st	Z, r24
 38e:	7f cf       	rjmp	.-258    	; 0x28e <main+0xa4>

00000390 <_exit>:
 390:	f8 94       	cli

00000392 <__stop_program>:
 392:	ff cf       	rjmp	.-2      	; 0x392 <__stop_program>
